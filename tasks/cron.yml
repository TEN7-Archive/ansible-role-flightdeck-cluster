---
- name: Create cronjobs
  k8s:
    state: "{{ item.state | default('present') }}"
    definition: |
      apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: "{{ item.name }}"
      spec:
        schedule: "{{ item.schedule | default('0 0 * * *') }}"
        successfulJobsHistoryLimit: {{ item.keepLastSuccessful | default(0) }}
        failedJobsHistoryLimit: {{ item.keepLastFailed | default(1) }}
        concurrencyPolicy: {{ item.concurrencyPolicy | default('Forbid') }}
        suspend: {{ item.suspend | default(false) | ternary('true', 'false') }}
        startingDeadlineSeconds: {{ item.deadlineSeconds | default('60') }}
        jobTemplate:
          spec:
            template:
              spec:
      {% if (item.nodeSelector is defined) and (item.nodeSelector.key is defined) and (item.nodeSelector.value is defined) %}
                nodeSelector:
                  {{ item.nodeSelector.key }}: {{ item.nodeSelector.value }}
      {% endif %}
      {% if (item.affinity is defined) %}
                affinity:
                  {{ item.affinity | to_nice_yaml(indent=2) | indent(12) }}
      {% endif %}
                containers:
                  - name: cron
                    image: "{{ item.image }}"
                    imagePullPolicy: {{ item.imagePullPolicy | default('Always') }}
      {% if (item.resources is defined) %}
                    resources:
                      {{ item.resources | to_nice_yaml(indent=2) | indent(16) }}
      {% endif %}
      {% if item.command is defined %}
                    command:
      {% for _command in item.command %}
                      - "{{ _command }}"
      {% endfor %}
      {% endif %}
      {% if item.args is defined %}
                    args:
      {% for _arg in item.args %}
                      - "{{ _arg }}"
      {% endfor %}
      {% endif %}
      {% if item.env is defined %}
                    env:
      {% for _env in item.env | default([]) %}
                      - name: "{{ _env.name }}"
                        value: "{{ _env.value }}"
      {% endfor %}
      {% endif %}
      {% if (item.secrets is defined) or (item.configMaps is defined)  or (item.volumes is defined) %}
                    volumeMounts:
      {% for _volume in item.volumes | default([]) %}
                      - name: "{{ _volume.volName | default('vol-pvc-' + _volume.name) }}"
                        mountPath: "{{ _volume.path | default('/mnt/' + _volume.name ) }}"
      {% if _volume.subPath is defined %}
                        subPath: "{{ _volume.subPath }}"
      {% endif %}
      {% endfor %}
      {% for _secret in item.secrets | default([]) %}
                      - name: "{{ _secret.volName | default('vol-secret-' + _secret.name) }}"
                        mountPath: "{{ _secret.path | default('/secrets') }}"
      {% endfor %}
      {% for _config in item.configMaps | default([]) %}
                      - name: "{{ _config.volName | default('vol-config-' + _config.name) }}"
                        mountPath: "{{ _config.path | default('/config') }}"
      {% endfor %}
      {% endif %}
                restartPolicy: "{{ item.restartPolicy | default('OnFailure') }}"
      {% if item.imagePullSecrets is defined %}
                imagePullSecrets:
      {% for _imagePullSecret in item.imagePullSecrets %}
                  - name: "{{ _imagePullSecret }}"
      {% endfor %}
      {% endif %}
      {% if (item.secrets is defined) or (item.configMaps is defined) or (item.volumes is defined) %}
                volumes:
      {% for _volume in item.volumes | default([]) %}
                  - name: "{{ _volume.volName | default('vol-pvc-' + _volume.name) }}"
                    persistentVolumeClaim:
                      claimName: "{{ _volume.name }}"
      {% endfor %}
      {% for _secret in item.secrets | default([]) %}
                  - name: "{{ _secret.volName | default('vol-secret-' + _secret.name) }}"
                    secret:
                      secretName: "{{ _secret.name }}"
      {% endfor %}
      {% for _config in item.configMaps | default([]) %}
                  - name: "{{ _config.volName | default('vol-config-' + _config.name) }}"
                    configMap:
                      name: "{{ _config.name }}"
      {% endfor %}
      {% endif %}
    kubeconfig: "{{ flightdeck_cluster_kubeconfig | default(omit) }}"
    namespace: "{{ flightdeck_cluster.namespace | default('default') }}"
  loop: "{{ flightdeck_cluster.cron | default([]) }}"
  loop_control:
    label: "{{ item.name }}"
