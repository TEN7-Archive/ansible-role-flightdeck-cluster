---
- name: Create cron daily cron
  k8s:
    state: "{{ item.state | default('present') }}"
    definition: |
      apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: "{{ item.name }}"
      spec:
        schedule: "{{ item.schedule | default('0 0 * * *') }}"
        successfulJobsHistoryLimit: {{ item.keepLastSuccessful | default(0) }}
        failedJobsHistoryLimit: {{ item.keepLastFailed | default(1) }}
        jobTemplate:
          spec:
            template:
              spec:
      {% if (item.nodeSelector.key is defined) and (item.nodeSelector.value is defined) %}
                nodeSelector:
                  {{ item.nodeSelector.key }}: {{ item.nodeSelector.value }}
      {% endif %}
                containers:
                  - name: cron
                    image: "{{ item.image }}"
      {% if item.command is defined %}
                    command:
      {% for _command in item.command %}
                      - {{ _command }}
      {% endfor %}
      {% endif %}
      {% if item.args is defined %}
                    args:
      {% for _arg in item.args %}
                      - {{ _arg }}
      {% endfor %}
      {% endif %}
      {% if (item.secrets is defined) or (item.configMaps is defined) %}
                    volumeMounts:
      {% for _secret in item.secrets | default([]) %}
                      - name: "{{ _secret.volName | default('vol-secret-' + _secret.name) }}"
                        mountPath: "{{ _secret.path | default('/secrets') }}"
      {% endfor %}
      {% for _config in item.configMaps | default([]) %}
                      - name: "{{ _config.volName | default('vol-config-' + _config.name) }}"
                        mountPath: "{{ _config.path | default('/config') }}"
      {% endfor %}
      {% endif %}
                restartPolicy: OnFailure
      {% if (item.secrets is defined) or (item.configMaps is defined) %}
                volumes:
      {% for _secret in item.secrets | default([]) %}
                  - name: "{{ _secret.volName | default('vol-secret-' + _secret.name) }}"
                    secret:
                      secretName: "{{ _secret.name }}"
      {% endfor %}
      {% for _config in item.configMaps | default([]) %}
                  - name: "{{ _config.volName | default('vol-config-' + _config.name) }}"
                    configMap:
                      name: "{{ _config.name }}"
      {% endfor %}
      {% endif %}
    kubeconfig: "{{ flightdeck_cluster_kubeconfig | default(omit) }}"
    namespace: "{{ flightdeck_cluster.namespace | default('default') }}"
  loop: "{{ flightdeck_cluster.cron | default([]) }}"
