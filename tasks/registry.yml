---
- name: Create registry deployment
  k8s:
    state: "{{ flightdeck_cluster.registry.state | default('present') }}"
    definition: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          app: registry
        name: registry
      spec:
        replicas: {{ flightdeck_cluster.registry.replicas | default('1') }}
        selector:
          matchLabels:
            app: registry
        template:
          metadata:
            labels:
              app: registry
          spec:
      {% if (flightdeck_cluster.registry.nodeSelector is defined) and (flightdeck_cluster.registry.nodeSelector.key is defined) and (flightdeck_cluster.registry.nodeSelector.value is defined) %}
            nodeSelector:
              {{ flightdeck_cluster.registry.nodeSelector.key }}: {{ flightdeck_cluster.registry.nodeSelector.value }}
      {% endif %}
      {% if flightdeck_cluster.registry.env is defined %}
            env:
      {% for _env in flightdeck_cluster.registry.env | default([]) %}
              - name: "{{ _env.key }}"
                value: "{{ _env.value }}"
      {% endfor %}
      {% endif %}
            containers:
              - image: {{ flightdeck_cluster.registry.image | default('registry:2.7') }}
                imagePullPolicy: Always
                name: registry
                ports:
                  - containerPort: 5000
      {% if (flightdeck_cluster.registry.secrets is defined) or (flightdeck_cluster.registry.configMaps is defined) or (flightdeck_cluster.registry.volumes is defined) %}
                volumeMounts:
      {% for _volume in flightdeck_cluster.registry.volumes | default([]) %}
                  - name: "{{ _volume.volName | default('vol-pvc-' + _volume.name) }}"
                    mountPath: "{{ _volume.path | default('/mnt/' + _volume.name ) }}"
      {% if _volume.subPath is defined %}
                    subPath: "{{ _volume.subPath }}"
      {% endif %}
      {% endfor %}
      {% for _secret in flightdeck_cluster.registry.secrets | default([]) %}
                  - name: "{{ _secret.volName | default('vol-secret-' + _secret.name) }}"
                    mountPath: "{{ _secret.path | default('/secrets') }}"
      {% endfor %}
      {% for _config in flightdeck_cluster.registry.configMaps | default([]) %}
                  - name: "{{ _config.volName | default('vol-config-' + _config.name) }}"
                    mountPath: "{{ _config.path | default('/config') }}"
      {% endfor %}
      {% endif %}
      {% if flightdeck_cluster.registry.imagePullSecrets is defined %}
            imagePullSecrets:
      {% for _imagePullSecret in flightdeck_cluster.registry.imagePullSecrets %}
              - name: "{{ _imagePullSecret }}"
      {% endfor %}
      {% endif %}
      {% if (flightdeck_cluster.registry.secrets is defined) or (flightdeck_cluster.registry.configMaps is defined) or (flightdeck_cluster.registry.volumes is defined) %}
            volumes:
      {% for _volume in flightdeck_cluster.registry.volumes | default([]) %}
              - name: "{{ _volume.volName | default('vol-pvc-' + _volume.name) }}"
                persistentVolumeClaim:
                  claimName: "{{ _volume.name }}"
      {% endfor %}
      {% for _secret in flightdeck_cluster.registry.secrets | default([]) %}
              - name: "{{ _secret.volName | default('vol-secret-' + _secret.name) }}"
                secret:
                  secretName: "{{ _secret.name }}"
      {% endfor %}
      {% for _config in flightdeck_cluster.registry.configMaps | default([]) %}
              - name: "{{ _config.volName | default('vol-config-' + _config.name) }}"
                configMap:
                  name: "{{ _config.name }}"
      {% endfor %}
      {% endif %}
    kubeconfig: "{{ flightdeck_cluster_kubeconfig | default(omit) }}"
    namespace: "{{ flightdeck_cluster.namespace | default('default') }}"
- name: Create registry service
  k8s:
    state: "{{ flightdeck_cluster.registry.state | default('present') }}"
    definition: |
      apiVersion: v1
      kind: Service
      metadata:
        name: registry
      spec:
        ports:
          -
            name: http
            port: 5000
            protocol: TCP
        selector:
          app: registry
    kubeconfig: "{{ flightdeck_cluster_kubeconfig | default(omit) }}"
    namespace: "{{ flightdeck_cluster.namespace | default('default') }}"
